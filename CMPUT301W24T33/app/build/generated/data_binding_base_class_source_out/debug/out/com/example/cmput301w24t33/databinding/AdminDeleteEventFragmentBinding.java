// Generated by view binder compiler. Do not edit!
package com.example.cmput301w24t33.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.cmput301w24t33.R;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class AdminDeleteEventFragmentBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView backActionbarTextview;

  @NonNull
  public final ImageButton backArrowImg;

  @NonNull
  public final Button cancelButton;

  @NonNull
  public final Button deleteButton;

  @NonNull
  public final RelativeLayout editEventActionbar;

  @NonNull
  public final TextInputEditText endDateEditText;

  @NonNull
  public final TextInputLayout endDateInputLayout;

  @NonNull
  public final TextInputEditText endTimeEditText;

  @NonNull
  public final TextInputLayout endTimeInputLayout;

  @NonNull
  public final TextInputEditText eventDescriptionEditText;

  @NonNull
  public final TextInputLayout eventDescriptionInputLayout;

  @NonNull
  public final LinearLayout eventInformationLayout;

  @NonNull
  public final TextInputEditText eventLocationEditText;

  @NonNull
  public final TextInputLayout eventLocationInputLayout;

  @NonNull
  public final TextInputEditText eventNameEditText;

  @NonNull
  public final TextInputLayout eventNameInputLayout;

  @NonNull
  public final TextInputEditText maxAttendeesEditText;

  @NonNull
  public final TextInputLayout maxAttendeesInputLayout;

  @NonNull
  public final TextInputEditText startDateEditText;

  @NonNull
  public final TextInputLayout startDateInputLayout;

  @NonNull
  public final TextInputEditText startTimeEditText;

  @NonNull
  public final TextInputLayout startTimeInputLayout;

  private AdminDeleteEventFragmentBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView backActionbarTextview, @NonNull ImageButton backArrowImg,
      @NonNull Button cancelButton, @NonNull Button deleteButton,
      @NonNull RelativeLayout editEventActionbar, @NonNull TextInputEditText endDateEditText,
      @NonNull TextInputLayout endDateInputLayout, @NonNull TextInputEditText endTimeEditText,
      @NonNull TextInputLayout endTimeInputLayout,
      @NonNull TextInputEditText eventDescriptionEditText,
      @NonNull TextInputLayout eventDescriptionInputLayout,
      @NonNull LinearLayout eventInformationLayout,
      @NonNull TextInputEditText eventLocationEditText,
      @NonNull TextInputLayout eventLocationInputLayout,
      @NonNull TextInputEditText eventNameEditText, @NonNull TextInputLayout eventNameInputLayout,
      @NonNull TextInputEditText maxAttendeesEditText,
      @NonNull TextInputLayout maxAttendeesInputLayout,
      @NonNull TextInputEditText startDateEditText, @NonNull TextInputLayout startDateInputLayout,
      @NonNull TextInputEditText startTimeEditText, @NonNull TextInputLayout startTimeInputLayout) {
    this.rootView = rootView;
    this.backActionbarTextview = backActionbarTextview;
    this.backArrowImg = backArrowImg;
    this.cancelButton = cancelButton;
    this.deleteButton = deleteButton;
    this.editEventActionbar = editEventActionbar;
    this.endDateEditText = endDateEditText;
    this.endDateInputLayout = endDateInputLayout;
    this.endTimeEditText = endTimeEditText;
    this.endTimeInputLayout = endTimeInputLayout;
    this.eventDescriptionEditText = eventDescriptionEditText;
    this.eventDescriptionInputLayout = eventDescriptionInputLayout;
    this.eventInformationLayout = eventInformationLayout;
    this.eventLocationEditText = eventLocationEditText;
    this.eventLocationInputLayout = eventLocationInputLayout;
    this.eventNameEditText = eventNameEditText;
    this.eventNameInputLayout = eventNameInputLayout;
    this.maxAttendeesEditText = maxAttendeesEditText;
    this.maxAttendeesInputLayout = maxAttendeesInputLayout;
    this.startDateEditText = startDateEditText;
    this.startDateInputLayout = startDateInputLayout;
    this.startTimeEditText = startTimeEditText;
    this.startTimeInputLayout = startTimeInputLayout;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static AdminDeleteEventFragmentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static AdminDeleteEventFragmentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.admin_delete_event_fragment, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static AdminDeleteEventFragmentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.back_actionbar_textview;
      TextView backActionbarTextview = ViewBindings.findChildViewById(rootView, id);
      if (backActionbarTextview == null) {
        break missingId;
      }

      id = R.id.back_arrow_img;
      ImageButton backArrowImg = ViewBindings.findChildViewById(rootView, id);
      if (backArrowImg == null) {
        break missingId;
      }

      id = R.id.cancel_button;
      Button cancelButton = ViewBindings.findChildViewById(rootView, id);
      if (cancelButton == null) {
        break missingId;
      }

      id = R.id.delete_button;
      Button deleteButton = ViewBindings.findChildViewById(rootView, id);
      if (deleteButton == null) {
        break missingId;
      }

      id = R.id.edit_event_actionbar;
      RelativeLayout editEventActionbar = ViewBindings.findChildViewById(rootView, id);
      if (editEventActionbar == null) {
        break missingId;
      }

      id = R.id.end_date_edit_text;
      TextInputEditText endDateEditText = ViewBindings.findChildViewById(rootView, id);
      if (endDateEditText == null) {
        break missingId;
      }

      id = R.id.end_date_input_layout;
      TextInputLayout endDateInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (endDateInputLayout == null) {
        break missingId;
      }

      id = R.id.end_time_edit_text;
      TextInputEditText endTimeEditText = ViewBindings.findChildViewById(rootView, id);
      if (endTimeEditText == null) {
        break missingId;
      }

      id = R.id.end_time_input_layout;
      TextInputLayout endTimeInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (endTimeInputLayout == null) {
        break missingId;
      }

      id = R.id.event_description_edit_text;
      TextInputEditText eventDescriptionEditText = ViewBindings.findChildViewById(rootView, id);
      if (eventDescriptionEditText == null) {
        break missingId;
      }

      id = R.id.event_description_input_layout;
      TextInputLayout eventDescriptionInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (eventDescriptionInputLayout == null) {
        break missingId;
      }

      id = R.id.event_information_layout;
      LinearLayout eventInformationLayout = ViewBindings.findChildViewById(rootView, id);
      if (eventInformationLayout == null) {
        break missingId;
      }

      id = R.id.event_location_edit_text;
      TextInputEditText eventLocationEditText = ViewBindings.findChildViewById(rootView, id);
      if (eventLocationEditText == null) {
        break missingId;
      }

      id = R.id.event_location_input_layout;
      TextInputLayout eventLocationInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (eventLocationInputLayout == null) {
        break missingId;
      }

      id = R.id.event_name_edit_text;
      TextInputEditText eventNameEditText = ViewBindings.findChildViewById(rootView, id);
      if (eventNameEditText == null) {
        break missingId;
      }

      id = R.id.event_name_input_layout;
      TextInputLayout eventNameInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (eventNameInputLayout == null) {
        break missingId;
      }

      id = R.id.max_attendees_edit_text;
      TextInputEditText maxAttendeesEditText = ViewBindings.findChildViewById(rootView, id);
      if (maxAttendeesEditText == null) {
        break missingId;
      }

      id = R.id.max_attendees_input_layout;
      TextInputLayout maxAttendeesInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (maxAttendeesInputLayout == null) {
        break missingId;
      }

      id = R.id.start_date_edit_text;
      TextInputEditText startDateEditText = ViewBindings.findChildViewById(rootView, id);
      if (startDateEditText == null) {
        break missingId;
      }

      id = R.id.start_date_input_layout;
      TextInputLayout startDateInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (startDateInputLayout == null) {
        break missingId;
      }

      id = R.id.start_time_edit_text;
      TextInputEditText startTimeEditText = ViewBindings.findChildViewById(rootView, id);
      if (startTimeEditText == null) {
        break missingId;
      }

      id = R.id.start_time_input_layout;
      TextInputLayout startTimeInputLayout = ViewBindings.findChildViewById(rootView, id);
      if (startTimeInputLayout == null) {
        break missingId;
      }

      return new AdminDeleteEventFragmentBinding((ConstraintLayout) rootView, backActionbarTextview,
          backArrowImg, cancelButton, deleteButton, editEventActionbar, endDateEditText,
          endDateInputLayout, endTimeEditText, endTimeInputLayout, eventDescriptionEditText,
          eventDescriptionInputLayout, eventInformationLayout, eventLocationEditText,
          eventLocationInputLayout, eventNameEditText, eventNameInputLayout, maxAttendeesEditText,
          maxAttendeesInputLayout, startDateEditText, startDateInputLayout, startTimeEditText,
          startTimeInputLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

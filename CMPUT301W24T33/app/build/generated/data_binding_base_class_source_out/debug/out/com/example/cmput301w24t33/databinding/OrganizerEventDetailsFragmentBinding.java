// Generated by view binder compiler. Do not edit!
package com.example.cmput301w24t33.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.cmput301w24t33.R;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class OrganizerEventDetailsFragmentBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton checkInsButton;

  @NonNull
  public final MaterialButton editEventButton;

  @NonNull
  public final TextView eventDescriptionTextView;

  @NonNull
  public final TextView eventLocationTextView;

  @NonNull
  public final TextView eventNameTextView;

  @NonNull
  public final ImageView eventPosterImageView;

  @NonNull
  public final TextView eventStartEndDateTimeTextView;

  @NonNull
  public final MaterialButton notificationsButton;

  @NonNull
  public final ImageButton shareQrCodeButton;

  @NonNull
  public final MaterialButton signUpsButton;

  @NonNull
  public final MaterialToolbar toolbar;

  private OrganizerEventDetailsFragmentBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton checkInsButton, @NonNull MaterialButton editEventButton,
      @NonNull TextView eventDescriptionTextView, @NonNull TextView eventLocationTextView,
      @NonNull TextView eventNameTextView, @NonNull ImageView eventPosterImageView,
      @NonNull TextView eventStartEndDateTimeTextView, @NonNull MaterialButton notificationsButton,
      @NonNull ImageButton shareQrCodeButton, @NonNull MaterialButton signUpsButton,
      @NonNull MaterialToolbar toolbar) {
    this.rootView = rootView;
    this.checkInsButton = checkInsButton;
    this.editEventButton = editEventButton;
    this.eventDescriptionTextView = eventDescriptionTextView;
    this.eventLocationTextView = eventLocationTextView;
    this.eventNameTextView = eventNameTextView;
    this.eventPosterImageView = eventPosterImageView;
    this.eventStartEndDateTimeTextView = eventStartEndDateTimeTextView;
    this.notificationsButton = notificationsButton;
    this.shareQrCodeButton = shareQrCodeButton;
    this.signUpsButton = signUpsButton;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static OrganizerEventDetailsFragmentBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static OrganizerEventDetailsFragmentBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.organizer_event_details_fragment, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static OrganizerEventDetailsFragmentBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.check_ins_button;
      MaterialButton checkInsButton = ViewBindings.findChildViewById(rootView, id);
      if (checkInsButton == null) {
        break missingId;
      }

      id = R.id.edit_event_button;
      MaterialButton editEventButton = ViewBindings.findChildViewById(rootView, id);
      if (editEventButton == null) {
        break missingId;
      }

      id = R.id.event_description_text_view;
      TextView eventDescriptionTextView = ViewBindings.findChildViewById(rootView, id);
      if (eventDescriptionTextView == null) {
        break missingId;
      }

      id = R.id.event_location_text_view;
      TextView eventLocationTextView = ViewBindings.findChildViewById(rootView, id);
      if (eventLocationTextView == null) {
        break missingId;
      }

      id = R.id.event_name_text_view;
      TextView eventNameTextView = ViewBindings.findChildViewById(rootView, id);
      if (eventNameTextView == null) {
        break missingId;
      }

      id = R.id.event_poster_image_view;
      ImageView eventPosterImageView = ViewBindings.findChildViewById(rootView, id);
      if (eventPosterImageView == null) {
        break missingId;
      }

      id = R.id.event_start_end_date_time_text_view;
      TextView eventStartEndDateTimeTextView = ViewBindings.findChildViewById(rootView, id);
      if (eventStartEndDateTimeTextView == null) {
        break missingId;
      }

      id = R.id.notifications_button;
      MaterialButton notificationsButton = ViewBindings.findChildViewById(rootView, id);
      if (notificationsButton == null) {
        break missingId;
      }

      id = R.id.share_qr_code_button;
      ImageButton shareQrCodeButton = ViewBindings.findChildViewById(rootView, id);
      if (shareQrCodeButton == null) {
        break missingId;
      }

      id = R.id.sign_ups_button;
      MaterialButton signUpsButton = ViewBindings.findChildViewById(rootView, id);
      if (signUpsButton == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new OrganizerEventDetailsFragmentBinding((ConstraintLayout) rootView, checkInsButton,
          editEventButton, eventDescriptionTextView, eventLocationTextView, eventNameTextView,
          eventPosterImageView, eventStartEndDateTimeTextView, notificationsButton,
          shareQrCodeButton, signUpsButton, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
